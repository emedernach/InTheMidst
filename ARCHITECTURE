
"In The Midst"  is a database mediator: it  abstracts to the
users  a   set  of  database   as  a  single   database  and
rewrites/orchestrates queries accordingly.


Postgres FDW is used to access remote tables.

However FDW has some problems:

** No foreign function calls

** Extremely inefficient joins

On a pool:
SELECT * FROM object_000 WHERE q3c_radial_query(ra_PS, decl_PS, 1.3, 3.4, .2) ;
  ...
  (2416 rows)

  Time: 130.300 ms

On the master:
SELECT * FROM master_object_000 WHERE q3c_radial_query(ra_PS, decl_PS, 1.3, 3.4, .2) ;
  ...
  (2416 rows)

  Time: 130843.931 ms

=> 1000x slower
  
** Extremely inefficient predicate filtering

On pool1:
SELECT * FROM object_003_xyz AS o1, object_003_xyz AS o2 WHERE o1.objectid <> o2.objectid  AND cos(radians(o1.ra_PS))  * cos(radians(o1.decl_PS)) BETWEEN cos(radians(o2.ra_PS))  * cos(radians(o2.decl_PS))  - sin(radians(1.5e-5  / 2))  * 2 AND cos(radians(o2.ra_PS))  * cos(radians(o2.decl_PS))  + sin(radians(1.5e-5  / 2))  * 2  AND sin(radians(o1.ra_PS))  * cos(radians(o1.decl_PS)) BETWEEN sin(radians(o2.ra_PS))  * cos(radians(o2.decl_PS))  - sin(radians(1.5e-5  / 2))  * 2 AND sin(radians(o2.ra_PS))  * cos(radians(o2.decl_PS))  + sin(radians(1.5e-5  / 2))  * 2 AND sin(radians(o1.decl_PS)) BETWEEN sin(radians(o2.decl_PS))  - sin(radians(1.5e-5  / 2))  * 2 AND sin(radians(o2.decl_PS))  + sin(radians(1.5e-5  / 2))  * 2 AND
degrees(asin(sqrt(power(sin(radians((o2.decl_PS  - o1.decl_PS)  / 2)), 2)  + power(sin(radians((o2.ra_PS  - o1.ra_PS)  / 2)), 2)  * cos(radians(o1.decl_PS)) * cos(radians(o2.decl_PS))))  * 2) <= 1.5e-5
(4 rows)
Time: 2738.217 ms

On the master:
SELECT * FROM master_object_003_xyz AS o1, master_object_003_xyz AS o2 WHERE o1.objectid <> o2.objectid  AND cos(radians(o1.ra_PS))  * cos(radians(o1.decl_PS)) BETWEEN cos(radians(o2.ra_PS))  * cos(radians(o2.decl_PS))  - sin(radians(1.5e-5  / 2))  * 2 AND cos(radians(o2.ra_PS))  * cos(radians(o2.decl_PS))  + sin(radians(1.5e-5  / 2))  * 2  AND sin(radians(o1.ra_PS))  * cos(radians(o1.decl_PS)) BETWEEN sin(radians(o2.ra_PS))  * cos(radians(o2.decl_PS))  - sin(radians(1.5e-5  / 2))  * 2 AND sin(radians(o2.ra_PS))  * cos(radians(o2.decl_PS))  + sin(radians(1.5e-5  / 2))  * 2 AND sin(radians(o1.decl_PS)) BETWEEN sin(radians(o2.decl_PS))  - sin(radians(1.5e-5  / 2))  * 2 AND sin(radians(o2.decl_PS))  + sin(radians(1.5e-5  / 2))  * 2 AND degrees(asin(sqrt(power(sin(radians((o2.decl_PS  - o1.decl_PS)  / 2)), 2)  + power(sin(radians((o2.ra_PS  - o1.ra_PS)  / 2)), 2)  * cos(radians(o1.decl_PS)) * cos(radians(o2.decl_PS))))  * 2) <= 1.5e-5
(4 rows)
Time: 513711.684 ms

=> 200x slower

Consequently we  use FDW  only for accessing  remote table and  try to
avoid it for query planning.

* Solution:
 - Find sub-queries that could be executed aside.
 - Store the result in a temporary table on the pool
 - Export this table to the master
 - Replace the sub-query with the foreign table

 